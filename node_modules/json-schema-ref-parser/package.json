{
  "_from": "json-schema-ref-parser",
  "_id": "json-schema-ref-parser@7.1.0",
  "_inBundle": false,
  "_integrity": "sha512-eP9+39HimQUpmqEUHRpV+oh8hiVMRU2tD6H+8uDc0raCQxX6jARN4nSJe5OpAtPt7eObuIUIsW7AwvGBzCHavQ==",
  "_location": "/json-schema-ref-parser",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "json-schema-ref-parser",
    "fetchSpec": "latest",
    "name": "json-schema-ref-parser",
    "raw": "json-schema-ref-parser",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/swagger-parser"
  ],
  "_resolved": "https://registry.npmjs.org/json-schema-ref-parser/-/json-schema-ref-parser-7.1.0.tgz",
  "_shasum": "987582b19fa06a37db4797d4e825879a7aea127c",
  "_shrinkwrap": null,
  "_spec": "json-schema-ref-parser",
  "_where": "/home/vi109/Faizan-Vahevaria/StarUML/staruml-cefact",
  "author": {
    "name": "James Messinger",
    "url": "https://jamesmessinger.com"
  },
  "browser": {
    "fs": false
  },
  "bugs": {
    "url": "https://github.com/APIDevTools/json-schema-ref-parser/issues"
  },
  "bundleDependencies": false,
  "contributors": [
    {
      "name": "Boris Cherny",
      "email": "boris@performancejs.com"
    }
  ],
  "dependencies": {
    "call-me-maybe": "^1.0.1",
    "js-yaml": "^3.13.1",
    "ono": "^5.0.1"
  },
  "deprecated": false,
  "description": "Parse, Resolve, and Dereference JSON Schema $ref pointers",
  "devDependencies": {
    "@babel/polyfill": "^7.4.4",
    "@types/json-schema": "^7.0.1",
    "@types/node": "^12.0.8",
    "chai": "^4.2.0",
    "coveralls": "^3.0.4",
    "eslint": "^5.16.0",
    "eslint-config-modular": "^7.0.0",
    "host-environment": "^1.1.3",
    "karma": "^4.1.0",
    "karma-cli": "^2.0.0",
    "karma-config": "^1.5.2",
    "mocha": "^6.1.4",
    "npm-check": "^5.9.0",
    "nyc": "^14.1.1",
    "typescript": "^3.5.2",
    "version-bump-prompt": "^5.0.3"
  },
  "files": [
    "lib"
  ],
  "homepage": "https://apidevtools.org/json-schema-ref-parser/",
  "keywords": [
    "$ref",
    "dereference",
    "json",
    "json-pointer",
    "json-schema",
    "jsonschema",
    "resolve",
    "schema"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "name": "json-schema-ref-parser",
  "optionalDependencies": {},
  "readme": "JSON Schema $Ref Parser\n============================\n#### Parse, Resolve, and Dereference JSON Schema $ref pointers\n\n[![Build Status](https://api.travis-ci.com/APIDevTools/json-schema-ref-parser.svg?branch=master)](https://travis-ci.com/APIDevTools/json-schema-ref-parser)\n[![Coverage Status](https://coveralls.io/repos/github/APIDevTools/json-schema-ref-parser/badge.svg?branch=master)](https://coveralls.io/github/APIDevTools/json-schema-ref-parser)\n\n[![npm](https://img.shields.io/npm/v/json-schema-ref-parser.svg)](https://www.npmjs.com/package/json-schema-ref-parser)\n[![Dependencies](https://david-dm.org/APIDevTools/json-schema-ref-parser.svg)](https://david-dm.org/APIDevTools/json-schema-ref-parser)\n[![License](https://img.shields.io/npm/l/json-schema-ref-parser.svg)](LICENSE)\n\n\n[![OS and Browser Compatibility](https://apidevtools.org/img/badges/ci-badges-with-ie.svg)](https://travis-ci.com/APIDevTools/json-schema-ref-parser)\n\n\nThe Problem:\n--------------------------\nYou've got a JSON Schema with `$ref` pointers to other files and/or URLs.  Maybe you know all the referenced files ahead of time.  Maybe you don't.  Maybe some are local files, and others are remote URLs.  Maybe they are a mix of JSON and YAML format.  Maybe some of the files contain cross-references to each other.\n\n```javascript\n{\n  \"definitions\": {\n    \"person\": {\n      // references an external file\n      \"$ref\": \"schemas/people/Bruce-Wayne.json\"\n    },\n    \"place\": {\n      // references a sub-schema in an external file\n      \"$ref\": \"schemas/places.yaml#/definitions/Gotham-City\"\n    },\n    \"thing\": {\n      // references a URL\n      \"$ref\": \"http://wayne-enterprises.com/things/batmobile\"\n    },\n    \"color\": {\n      // references a value in an external file via an internal reference\n      \"$ref\": \"#/definitions/thing/properties/colors/black-as-the-night\"\n    }\n  }\n}\n```\n\n\nThe Solution:\n--------------------------\nJSON Schema $Ref Parser is a full [JSON Reference](https://tools.ietf.org/html/draft-pbryan-zyp-json-ref-03) and [JSON Pointer](https://tools.ietf.org/html/rfc6901) implementation that crawls even the most complex [JSON Schemas](http://json-schema.org/latest/json-schema-core.html) and gives you simple, straightforward JavaScript objects.\n\n- Use **JSON** or **YAML** schemas &mdash; or even a mix of both!\n- Supports `$ref` pointers to external files and URLs, as well as [custom sources](https://apidevtools.org/json-schema-ref-parser/docs/plugins/resolvers.html) such as databases\n- Can [bundle](https://apidevtools.org/json-schema-ref-parser/docs/ref-parser.html#bundlepath-options-callback) multiple files into a single schema that only has _internal_ `$ref` pointers\n- Can [dereference](https://apidevtools.org/json-schema-ref-parser/docs/ref-parser.html#dereferencepath-options-callback) your schema, producing a plain-old JavaScript object that's easy to work with\n- Supports [circular references](https://apidevtools.org/json-schema-ref-parser/docs/#circular-refs), nested references, back-references, and cross-references between files\n- Maintains object reference equality &mdash; `$ref` pointers to the same value always resolve to the same object instance\n- [Tested](https://travis-ci.com/APIDevTools/json-schema-ref-parser) in Node and all major web browsers on Windows, Mac, and Linux\n\n\nExample\n--------------------------\n\n```javascript\n$RefParser.dereference(mySchema, (err, schema) => {\n  if (err) {\n    console.error(err);\n  }\n  else {\n    // `schema` is just a normal JavaScript object that contains your entire JSON Schema,\n    // including referenced files, combined into a single object\n    console.log(schema.definitions.person.properties.firstName);\n  }\n}\n```\n\nOr use `async`/`await` syntax instead. The following example is the same as above:\n\n```javascript\ntry {\n  let schema = await $RefParser.dereference(mySchema);\n  console.log(schema.definitions.person.properties.firstName);\n}\ncatch(err) {\n  console.error(err);\n}\n```\n\nFor more detailed examples, please see the [API Documentation](https://apidevtools.org/json-schema-ref-parser/docs/)\n\n\n\nInstallation\n--------------------------\nInstall using [npm](https://docs.npmjs.com/about-npm/):\n\n```bash\nnpm install json-schema-ref-parser\n```\n\n\n\nUsage\n--------------------------\nWhen using Json-Schema-Ref-Parser in Node.js apps, you'll probably want to use **CommonJS** syntax:\n\n```javascript\nconst $RefParser = require(\"json-schema-ref-parser\");\n```\n\nWhen using a transpiler such as [Babel](https://babeljs.io/) or [TypeScript](https://www.typescriptlang.org/), or a bundler such as [Webpack](https://webpack.js.org/) or [Rollup](https://rollupjs.org/), you can use **ECMAScript modules** syntax instead:\n\n```javascript\nimport $RefParser from \"json-schema-ref-parser\";\n```\n\n\n\nBrowser support\n--------------------------\nJson-Schema-Ref-Parser supports recent versions of every major web browser.  Older browsers may require [Babel](https://babeljs.io/) and/or [polyfills](https://babeljs.io/docs/en/next/babel-polyfill).\n\nTo use Json-Schema-Ref-Parser in a browser, you'll need to use a bundling tool such as [Webpack](https://webpack.js.org/), [Rollup](https://rollupjs.org/), [Parcel](https://parceljs.org/), or [Browserify](http://browserify.org/). Some bundlers may require a bit of configuration, such as setting `browser: true` in [rollup-plugin-resolve](https://github.com/rollup/rollup-plugin-node-resolve).\n\n\n\nAPI Documentation\n--------------------------\nFull API documentation is available [right here](https://apidevtools.org/json-schema-ref-parser/docs/)\n\n\nContributing\n--------------------------\nI welcome any contributions, enhancements, and bug-fixes.  [File an issue](https://github.com/APIDevTools/json-schema-ref-parser/issues) on GitHub and [submit a pull request](https://github.com/APIDevTools/json-schema-ref-parser/pulls).\n\n#### Building/Testing\nTo build/test the project locally on your computer:\n\n1. __Clone this repo__<br>\n`git clone https://github.com/APIDevTools/json-schema-ref-parser.git`\n\n2. __Install dependencies__<br>\n`npm install`\n\n3. __Run the build script__<br>\n`npm run build`\n\n4. __Run the tests__<br>\n`npm test`\n\n\nLicense\n--------------------------\nJSON Schema $Ref Parser is 100% free and open-source, under the [MIT license](LICENSE). Use it however you want.\n\nBig Thanks To\n--------------------------\nThanks to these awesome companies for their support of Open Source developers ‚ù§\n\n[![Travis CI](https://jsdevtools.org/img/badges/travis-ci.svg)](https://travis-ci.com)\n[![SauceLabs](https://jsdevtools.org/img/badges/sauce-labs.svg)](https://saucelabs.com)\n[![Coveralls](https://jsdevtools.org/img/badges/coveralls.svg)](https://coveralls.io)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/APIDevTools/json-schema-ref-parser.git"
  },
  "scripts": {
    "bump": "bump --tag --push --all",
    "coverage": "npm run coverage:node && npm run coverage:browser",
    "coverage:browser": "npm run test:browser -- --coverage",
    "coverage:node": "nyc --reporter=text --reporter=lcov --report-dir coverage/node mocha",
    "lint": "eslint lib test/fixtures test/specs",
    "release": "npm run upgrade && npm test && npm run bump",
    "test": "npm run test:node && npm run test:browser && npm run test:typescript && npm run lint",
    "test:browser": "karma start --single-run",
    "test:node": "mocha",
    "test:typescript": "tsc --noEmit --strict --lib esnext test/specs/typescript-definition.spec.ts",
    "upgrade": "npm-check -u"
  },
  "typings": "lib/index.d.ts",
  "version": "7.1.0"
}
